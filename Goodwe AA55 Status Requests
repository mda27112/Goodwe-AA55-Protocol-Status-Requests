[
    {
        "id": "de95fe1f3eca9561",
        "type": "udp in",
        "z": "b880fa68f00a4e19",
        "name": "Goodwe TCP Receive",
        "iface": "",
        "port": "8899",
        "ipv": "udp4",
        "multicast": "false",
        "group": "",
        "datatype": "buffer",
        "x": 160,
        "y": 980,
        "wires": [
            [
                "b735acede4df5566"
            ]
        ]
    },
    {
        "id": "dce43cd40f380950",
        "type": "buffer-parser",
        "z": "b880fa68f00a4e19",
        "name": "Unpack Running Data",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int16be",
                "name": "Battery_Voltage",
                "offset": 17,
                "length": 1,
                "offsetbit": 0,
                "scale": ".1",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "Battery_Temp",
                "offset": 23,
                "length": 1,
                "offsetbit": 0,
                "scale": ".1",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "Battery_Current",
                "offset": 25,
                "length": 1,
                "offsetbit": 0,
                "scale": ".1",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "Battery_Charge_Limit",
                "offset": 27,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "Battery_Discharge_Limit",
                "offset": 29,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "Battery_Status",
                "offset": 31,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "byte",
                "name": "Battery_Soc",
                "offset": 33,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "byte",
                "name": "Battery_Mode",
                "offset": 37,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "output",
        "multipleResult": false,
        "fanOutMultipleResult": true,
        "setTopic": true,
        "outputs": 1,
        "x": 900,
        "y": 960,
        "wires": [
            [
                "57ee7e506f79f003"
            ]
        ]
    },
    {
        "id": "b735acede4df5566",
        "type": "function",
        "z": "b880fa68f00a4e19",
        "name": "Validate Goodwe AA55 Msg",
        "func": "//The reference Goodwe Modbus msg header sequence\nconst referenceBuffer = Buffer.from([0xAA, 0x55, 0x7F, 0xC0]);\nconst headerBuffer = Buffer.alloc(4);\n\n//Copy to the first 4 bytes from the incoming msg payload being the Goodwe msg header\nmsg.payload.copy(headerBuffer, 0, 0, 4)\n\nif(referenceBuffer.equals(headerBuffer)){\n    node.status({ fill: \"green\", shape: \"ring\", text: \"valid AA55\" });\n\n    //find the amount of data bytes to help with selecting the right parsing \n    msg.length = msg.payload.readUInt8(5);\n\n    //pass on the msg buffer payload only\n    msg.payload = msg.payload;\n    return msg;\n}\nelse{\n    node.status({ fill: \"red\", shape: \"ring\", text: \"invalid message\" });\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 980,
        "wires": [
            [
                "7f0c4a0ea9244adf"
            ]
        ]
    },
    {
        "id": "7f0c4a0ea9244adf",
        "type": "switch",
        "z": "b880fa68f00a4e19",
        "name": "Route Response",
        "property": "length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "130",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "134",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "137",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 670,
        "y": 980,
        "wires": [
            [
                "5b38c65481aa28e7"
            ],
            [
                "dce43cd40f380950"
            ],
            [
                "9c5761311ddf83ee"
            ],
            [
                "a9dc662f3a47faac"
            ]
        ]
    },
    {
        "id": "a9dc662f3a47faac",
        "type": "debug",
        "z": "b880fa68f00a4e19",
        "name": "Invalid AA55 Msg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 1040,
        "wires": []
    },
    {
        "id": "e800221d9d5f1908",
        "type": "debug",
        "z": "b880fa68f00a4e19",
        "name": "Device Info",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 920,
        "wires": []
    },
    {
        "id": "5b38c65481aa28e7",
        "type": "buffer-parser",
        "z": "b880fa68f00a4e19",
        "name": "Unpack Device Info",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "string",
                "name": "serial_number",
                "offset": 38,
                "length": 16,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "model_number",
                "offset": 12,
                "length": 10,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "hardware",
                "offset": 38,
                "length": 8,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "firmware",
                "offset": 7,
                "length": 5,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "arm_firware",
                "offset": 58,
                "length": 12,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 890,
        "y": 920,
        "wires": [
            [
                "e800221d9d5f1908"
            ]
        ]
    },
    {
        "id": "9c5761311ddf83ee",
        "type": "debug",
        "z": "b880fa68f00a4e19",
        "name": "RAW Device Settings Msg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 1000,
        "wires": []
    },
    {
        "id": "57ee7e506f79f003",
        "type": "debug",
        "z": "b880fa68f00a4e19",
        "name": "Device Running Data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 960,
        "wires": []
    }
]
